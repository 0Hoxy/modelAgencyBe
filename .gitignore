# 바이트 컴파일된 / 최적화된 / DLL 파일들
__pycache__/
*.py[cod]
*$py.class

# C 확장 모듈
*.so

# 배포 / 패키징
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  일반적으로 이 파일들은 PyInstaller가 exe를 빌드하기 전에
#  템플릿에서 python 스크립트에 의해 작성되어 날짜/기타 정보를 주입합니다.
*.manifest
*.spec

# 설치 프로그램 로그
pip-log.txt
pip-delete-this-directory.txt

# 단위 테스트 / 커버리지 리포트
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# 번역 파일
*.mo
*.pot

# Django 관련:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask 관련:
instance/
.webassets-cache

# Scrapy 관련:
.scrapy

# Sphinx 문서
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   라이브러리나 패키지의 경우, 코드가 여러 환경에서 실행되도록
#   의도되었기 때문에 이 파일들을 무시하고 싶을 수 있습니다.
#   그렇지 않으면 체크인하세요:
# .python-version

# pipenv
#   pypa/pipenv#598에 따르면 버전 관리에 Pipfile.lock을 포함하는 것이 권장됩니다.
#   그러나 협업의 경우, 플랫폼별 종속성이나 크로스 플랫폼 지원이 없는
#   종속성이 있는 경우 pipenv가 작동하지 않거나 필요한 모든 종속성을
#   설치하지 않는 종속성을 설치할 수 있습니다.
#Pipfile.lock

# poetry
#   Pipfile.lock과 유사하게, 일반적으로 버전 관리에 poetry.lock을 포함하는 것이 권장됩니다.
#   이는 재현성을 보장하기 위해 바이너리 패키지에 특히 권장되며,
#   라이브러리의 경우 더 일반적으로 무시됩니다.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Pipfile.lock과 유사하게, 일반적으로 버전 관리에 pdm.lock을 포함하는 것이 권장됩니다.
#pdm.lock
#   pdm은 프로젝트 전체 설정을 .pdm.toml에 저장하지만 버전 관리에 포함하지 않는 것이 권장됩니다.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; 예: github.com/David-OConnor/pyflow와 github.com/pdm-project/pdm에서 사용
__pypackages__/

# Celery 관련
celerybeat-schedule
celerybeat.pid

# SageMath 파싱된 파일
*.sage.py

# 환경 변수
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder 프로젝트 설정
.spyderproject
.spyproject

# Rope 프로젝트 설정
.ropeproject

# mkdocs 문서
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre 타입 체커
.pyre/

# pytype 정적 타입 분석기
.pytype/

# Cython 디버그 심볼
cython_debug/

# PyCharm
#  JetBrains 특정 템플릿은 별도의 JetBrains.gitignore에서 유지되며
#  전역 gitignore에 추가하거나 이 프로젝트 gitignore에 병합할 수 있습니다.
#  PyCharm 프로젝트의 경우 생성된 파일이므로 일반적으로 이 파일들을 무시하는 것이 권장됩니다:
#  https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
.idea/

# VS Code
.vscode/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# 아이콘은 두 개의 \r로 끝나야 함
Icon

# 썸네일
._*

# 볼륨 루트에 나타날 수 있는 파일들
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# 원격 AFP 공유에서 생성될 수 있는 디렉토리
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db

# 덤프 파일
*.stackdump

# 폴더 설정 파일
[Dd]esktop.ini

# 파일 공유에서 사용되는 휴지통
$RECYCLE.BIN/

# Windows 설치 프로그램 파일
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows 바로가기
*.lnk

# Linux
*~

# 삭제된 파일이 여전히 액세스되는 경우 프로세스가 열린 핸들로 생성할 수 있는 임시 파일
.fuse_hidden*

# KDE 디렉토리 기본 설정
.directory

# 모든 파티션이나 디스크에 나타날 수 있는 Linux 휴지통 폴더
.Trash-*

# 열린 파일이 제거되었지만 여전히 액세스되는 경우 생성되는 .nfs 파일
.nfs*

# 프로젝트 특화
uploads/
logs/
*.log

# 데이터베이스
*.db
*.sqlite3

# Alembic
alembic/versions/*.py
!alembic/versions/__init__.py

# FastAPI 특화
.pytest_cache/
htmlcov/

# 로컬 개발
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
*.swp
*.swo
*~

# 임시 파일
tmp/
temp/
